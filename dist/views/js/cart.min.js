"use strict";

const cartStore = JSON.parse(localStorage.getItem("cart"));class Cart {
  constructor() {
    this.cart = null === cartStore ? [] : cartStore;
  }static generateID() {
    const chosenChar = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcedfghijklmnopqrstuvwxyz0123456789_",
          iterationCount = 10,
          stringArray = [];for (let i = 0; i < 10; i += 1) {
      const randCharIndex = Math.floor(Math.random() * chosenChar.length),
            char = chosenChar.charAt(randCharIndex);stringArray.push(char);
    }const string = stringArray.join("");return stringArray.splice(0, stringArray.length), string;
  }storeOrder(_body) {
    const order = { id: Cart.generateID(), name: _body.name, price: _body.price, quantity: _body.quantity, imageUrl: _body.imageUrl };return this.cart.push(order), localStorage.setItem("cart", JSON.stringify(this.cart)), !0;
  }showAllOrders() {
    return this.cart;
  }updateSpecificOrder(_orderID, _body) {
    const orderIndex = this.cart.findIndex(order => order.id === _orderID),
          orderData = this.cart.splice(orderIndex, 1),
          order = { id: orderData[0].id, name: orderData[0].name, price: orderData[0].price, quantity: _body.quantity, imageUrl: orderData[0].imageUrl };this.cart.push(order), localStorage.setItem("cart", JSON.stringify(this.cart));
  }updateQuantityOrder(_orderID, _body) {
    const orderIndex = this.cart.findIndex(order => order.id === _orderID),
          orderData = this.cart.splice(orderIndex, 1),
          newQty = _body.quantity + orderData[0].quantity,
          order = { id: orderData[0].id, name: orderData[0].name, price: orderData[0].price, quantity: newQty, imageUrl: orderData[0].imageUrl };this.cart.push(order), localStorage.setItem("cart", JSON.stringify(this.cart));
  }deleteSpecificOrder(_orderID) {
    const orderIndex = this.cart.findIndex(order => order.id === _orderID);return this.cart.splice(orderIndex, 1), localStorage.setItem("cart", JSON.stringify(this.cart)), !0;
  }deleteAllOrders() {
    localStorage.removeItem("cart"), this.cart = [];
  }getSpecificOrder(name) {
    const orderIndex = this.cart.findIndex(order => order.name === name);return -1 !== orderIndex && this.cart[orderIndex].id;
  }getTotalPrice() {
    let totalPrice = 0;return Array.isArray(this.cart) && 0 !== this.cart.length && this.cart.forEach(order => {
      const orderPrice = order.quantity * order.price;totalPrice += orderPrice;
    }), totalPrice;
  }
}